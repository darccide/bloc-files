Exercises

1. What is time complexity and what is its relation
   to algorithms?

   A: Time complexity is a measure of the time it takes
      for an algorithm to complete its task.

2. What is runtime?

   A: Runtime is the physical time duration of an algorithm.
      It is also synonymous with time complexity.

3. How is the runtime of an algorithm calculated?

   A: Time complexity of an algorithm is calculated by 
      adding up how many instructions the algorithm will
      execute as a function of the size of its input, 
      then simplify the expression to the largest term 
      and drop any constants. 

4. Name the six types of algorithm growth rates we 
   saw in this checkpoint and list them in order of 
   most efficient to least efficient. Now Google 
   another algorithmic growth rate not covered and 
   place it in the correct spot in your list.

   A: The six types of algorithm growth rates we saw
      in this checkpoint, listed in order of most 
      efficient to least efficient are as follows:
        1. Constant
        2. Logarithmic
        3. Linear
        4. Log-Linear
        5. Quadratic
        6. Exponential
      
      The growth rate I Googled was Cubic Groth Rate. 
      Here is the new list with it slotted in its proper
      position

        1. Constant
        2. Logarithmic
        3. Linear
        4. Log-Linear
        5. Quadratic
        6. Cubic
        7. Exponential

5. Choose one of the algorithmic growth rates from 
   the last question and make a comparison to a 
   real-life situation.

   A: A savings account with an annual interest rate 
      of r grows exponentially because the amount of 
      money in the account increases annually by the 
      proportion r.

6. Determine the time complexity of the following 
   snippet of code. It is commonly known as a linear 
   search. 

   FUNCTION linearSearch(array, target)
     FOR each number in the array
       IF number = target THEN
         RETURN true
       END IF
     END FOR
     RETURN false
   END FUNCTION

   A: The time complexity of the function linearSearch
      is O(n).

7. Determine the time complexity of the following 
   snippet of code.

   FUNCTION foo(array)
     FOR each number in the array
       FOR each number in the array
         print "Hello" 
       END FOR
     END FOR
   END FUNCTION

   A: The time complexity of the function foo is O(n^2).

8. Determine the time complexity of the following 
   snippet of code. It is commonly known as the 
   Fibonacci sequence.

   FUNCTION fibonacci(number)
     IF number < 1 THEN
       ERROR
     ELSE IF number = 1 or 2 THEN
       RETURN 1
     ELSE
       CALL fibonacci WITH number - 2 RETURNING twoBack
       CALL fibonacci WITH number - 1 RETURNING oneBack
       RETURN twoBack + oneBack
     END IF
   END FUNCTION

   A: the time complexity of the function fibonacci is
      O(2^n).

9. Out of the code snippets you just saw, which is
   the most time efficient?

   A: the function linearSearch is the most efficient.cd
