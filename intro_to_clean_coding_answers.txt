1. In your own words, explain what clean code is and why it is important.

   A: Clean code is code that follows certain principles and represents generally recognized professional standards.
      These standards include code that exihibits proper naming; Don't repeat yourself; Code that is self documenting; Code following the single responsibility principle(SRP);
      Code passing the squint test; Code appropriately nesting; Code with extracted methods; code that is not over-engineered. Naming should be descriptive and meaningful. 
      Functions should be named with verbs. Any function returning "true" or "false" should be named with the keyword "is". Avoid using modifiers unless they are necessary
      for understanding the name properly. Avoid both abbreviations and misspellings in naming. Also name a variable according to its type. The principle of "don't repeat yourself"
      means avoid repetition as much as possible and write code that is reusable. Self-documenting code is code that is descriptive and easy to understand. An example of this would be
      if you have a function that gets the tip for a restaurant bill, you would name such a function something like "getTip". If code follows the SRP then all functions and classes in 
      your code will only be responsible for one thing. If code can pass the squint test then that means the programmer has visually checked the code for patterns and has refactored 
      accordingly. If code is nested appropriately then the nesting is allowing the code to be readable without becoming to confusing. If all methods have been extracted appropriately
      then each and every function will be responsible for only one process. If code isn't over-engineered then it will properly handle the problem(s) it is designed to overcome
      without being overcomplicated.

2. Read this article about Toyota and their use of bad code. Although you may not yet understand all of the topics discussed, think about another commonly used object that relies on computers and explain what would happen if the code was not created to an acceptable standard.

   A: Dams are another common object that relies on computers. If the computer code controlling a dam wasn't created to an acceptable standard a few problems could occur. 
      Firstly, the dam could release too much water and flood an area that potentially has large amounts of people living in said area. Also, if the dam pumps water to certain areas 
      in order to supply water, then those places could be without necessary water. Or in the reverse of that situation, if the dam pumps out water too quickly from the water reservoir
      then the water can become depleted and eventually not refill properly.

3. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

   FUNCTION do(x, y)               // Creating a new function
     IF y = "F" THEN               // Check if y is equal "F"
       SET z to (x-32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
       PRINT z                       // Print result
     ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
       SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
       PRINT z                       // Print result 
     END IF
   END FUNCTION

   A: I would not consider this code clean. First, the function name is not descriptive. It doesn't really tell what the function does in any meaningful way. Also, there is too many
      within the code. The comments are excessive. Also, this function should actually be three functions. The following would be how I would refactor the code:

   FUNCTION checkType(temperature, type)       
     IF type = "FAHRENHEIT" THEN                     // Check if temperature is Fahrenheit
       SET F to temperature                    
       return F                                      
     ELSE IF type = "CELCIUS" THEN                   // Check if temperature is Celcius
       SET C temperature                             
       RETURN C                                
     ELSE
       RETURN "This is not a recognized temperature" // Deal with a type that is not recognized
     END IF
   END FUNCTION

   FUNCTION convertFahrenheit(F)
     SET Celcius to (F-32) * (5/9)                   // Formula to convert degrees fahrenheit to celsius 
     PRINT Celcius
   END FUNCTION

   FUNCTION convertCelcius(C)
     SET Fahrenheit to C * 1.800 + 32.00             // Formula to convert degrees celsius to fahrenheit
     PRINT Fahrenheit
   END FUNCTION


4. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

   FUNCTION calcPercent(sum, total)
    IF NOT(total = 0) THEN
     SET percentage to sum / total * 100
    ELSE
     PRINT "Sorry, cannot divide by 0"
    END IF

    PRINT percentage
   END FUNCTION

   A: I would consider this code to not be clean. The name shouldn't be abbreviated. Also the math involved in the function doesn't follow order of operations. The following
      would be how I would refactor the code:

      FUNCTION calculatePercent(sum, total)
       IF NOT(total = 0) THEN
        SET percentage to (sum / total) * 100
       ELSE
        PRINT "Sorry, cannot divide by 0"
       END IF

       PRINT percentage
     END FUNCTION

5. Using pseudocode, refactor the code for the following examples using the principles you have learned in this checkpoint. 

   a. The following function prints the subtotal of a customer's transaction and receives payment accordingly.

      FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
         PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

         IF paymentType = 'CASH' THEN
             CALL getPayment RETURNING amount
             PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
         ELSE IF paymentType = 'CREDIT CARD' THEN
             CALL getPayment RETURNING amount
             PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
         END IF
      END FUNCTION

   b. The following function checks out a book if there are no issues with the guest's account.

      FUNCTION checkoutBook(book, guest)
       IF guest.accountActive THEN
           IF NOT(guest.hasOverdueBooks) THEN
               IF guest.outstandingFees = 0 THEN
                 APPEND book to guest.books
                 SET book.status to "Checked Out"
                 PRINT "Your books have been issued."
               END IF
           END IF
       ELSE
           PRINT "Unable to check out book."
       END IF
      END FUNCTION

   c. The following class is a code snippet that should support the transactions a customer can perform at an ATM.

      CLASS BankAccount

       FUNCTION displayBalance
        PRINT balance
       END FUNCTION

       FUNCTION deposit(amount)
        SET balance to balance + amount
       END FUNCTION

       FUNCTION withdraw(amount)
           IF balance > amount THEN
             SET balance to balance - amount
           END
       END FUNCTION

      FUNCTION creditCardOffer
          IF NOT(customer.hasCreditCard) THEN
              CALL offerCreditCard
          END
      END FUNCTION

      FUNCTION checkStatus
          IF NOT(customer.hasCheckingAccount) THEN
              CALL offerCheckingAccount
          END
      END FUNCTION

      ....
      ....
      ....

    END

    A: 

       a. FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
             SET totalPayment to subTotal * discountRate + (subTotal * tax)
             PRINT "Your total due is: " + totalPayment

             IF paymentType = 'CASH' THEN
                 CALL getPayment RETURNING amount
                 PRINT "Change due: " + amount - totalPayment
             ELSE IF paymentType = 'CREDIT CARD' THEN
                 CALL getPayment RETURNING amount
                 PRINT "Your credit card has been charged: " + totalPayment
             END IF
          END FUNCTION

      b. FUNCTION checkoutBook(book, guest)
          IF guest.accountActive THEN
              IF guest.hasOverdueBooks THEN
                  PRINT "Unable to check out book."
              ELSE IF guest.outstandingFees = 0 THEN
                  APPEND book to guest.books
                  SET book.status to "Checked Out"
                  PRINT "Your books have been issued."
              END IF
          END IF
         END FUNCTION

      c. CLASS BankAccount

       	 FUNCTION displayBalance
            PRINT balance
         END FUNCTION

         FUNCTION deposit(amount)
            SET balance to balance + amount
         END FUNCTION

         FUNCTION withdraw(amount)
             IF balance > amount THEN
               SET balance to balance - amount
             END
         END FUNCTION

      ....
      ....
      ....

    	 END

	 FUNCTION creditCardOffer
             IF NOT(customer.hasCreditCard) THEN
                 CALL offerCreditCard
             END
         END FUNCTION

        FUNCTION checkStatus
            IF NOT(customer.hasCheckingAccount) THEN
                CALL offerCheckingAccount
            END
        END FUNCTION


 Programming Questions

You may do the following problems in any language of your choice. Use the clean code principles taught in this section while writing the code.

6. Square Given an array of integers, find out whether the sum of the integers is a perfect square. If it is a perfect square, return the square root, otherwise return the sum.


   A: function findSquareRootOrSum(numbers) {
      	sum = 0
  
      	for (index = 0; index < numbers.length; index++) {
       	   sum += numbers[index]
      	}
      	if (Math.sqrt(sum) % 1 === 0) {
           return Math.sqrt(sum);
      	}else{
    	   return sum;
        }
      };

7. Duplicate Given an array of integers, find out whether the array contains any duplicate elements. The function should return true if any value appears at least twice in the array, and false if every element is distinct.


   A: function hasDuplicates(numbers) {
      /* temporary object */
      var uniqueObjects = {};
      /* create object attribute with name = value in array, this will not keep duplicates*/
      for (var index in numbers)
         uniqueObjects[numbers[index]] = "";
         /* if object's attributes match array, then no duplicates! */
         if (numbers.length == Object.keys(uniqueObjects).length) {
           return false;
         }else{
           return true;
         };
      }


8. 

   A: function findAnagram (stringOne, stringTwo) {
        var arrayOne = stringOne.split("").sort();
        var arrayTwo = stringTwo.split("").sort();
        var areAnagrams = true;

        for (index = 0; index < arrayOne.length && areAnagrams; index++) {
           if (arrayOne.length === arrayTwo.length) {
               if (arrayOne[index] != arrayTwo[index]){
                  areAnagrams = false;
               }
           }
        }

        if (areAnagrams) {
           console.log('They ARE anagrams');
        }else{
           console.log('They are NOT anagrams');
        }

     return areAnagrams;
     }

     findAnagram("rasp", "pars");
     findAnagram("pass", "asap");