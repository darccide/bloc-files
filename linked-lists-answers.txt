1. What are some pros and cons of using linked lists instead of arrays?

   A: 
   
   Pros:

 1. Inserting and deleting data does not require us to move/shift 
    subsequent data elements.
 2. Linked lists never contain empty placeholders.
 3. Each node in the list is independant in memory, so the operating
    system may use any available memory location to store it

   Cons:

 1. It can be inefficient to access an element with the list, since
    each node may exist anywhere in physical memory.
 2. Linked lists require more memory.

2. Come up with a real world example of a linked list.

   A: The history section of web browsers is a real world example of a 
      linked list. The history section creates a linked list of web-pages
      visited, so that when you check history or press  the "back" button,
      the previous node's data is fetched.

Programming Questions

1. The linked list push function should take a value, create a node,
   and add it to the end of a list. Below is pseudocode for a push
   function for a singly linked list. However, there is something wrong 
   with it. Submit both an explanation of the bug and a functional 
   implementation of the method.

   PSEUDOCODE:

   FUNCTION push(element)
   CREATE node
   SET node.value TO element
   SET node.next TO null

   IF the head node does not exist
    THEN SET head to node
   ELSE
    SET current to head
    SET current.next to node
   END IF
   END FUNCTION

   A: The error comes from the there is no while loop
      to point to the next node.

   function LinkedList(){  
     this.head = null;
   }

   LinkedList.prototype.push = function(element){  
    var node = {
       value: element,
       next: null
    }
    if(!this.head){
      this.head = node;      
    }
    else{
      current = this.head;
      while(current.next){
        current = current.next;
      }
      current.next = node;
    }
  }

  let list = new LinkedList();  
  // add
  list.push(867);  
  list.push(530);  
  list.push(999);

  list.head;  //Object value: 867  
  list.head.next; //Object value: 530 
  list.head.next.next //object value: 999 


2. Given an unsorted singly linked list, 
   remove all duplicates from the linked list.
   Example
   Input: a -> c -> d -> d -> a
   Output: a -> c -> d

   A: 

   void deleteDuplicates(LinkedListNode n) {
     HashSet<Integer> set = new HashStet<Integer>();
     LinkedListNode previous = null;
     while (n != null) {
        if (set.contains(n.data)) {
          previous.next = n.next;
        } else {
           set.add(n.data);
           previous = n;
        }
        n = n.next;
     }
   }

3. Given an unsorted singly linked list, reverse it.
   Example
   Input: a -> b -> c -> d
   Output: d -> c -> b -> a

   A: 

   LinkedListNode reverse(LinedListNode node) {
      LinkedListNode head = null;
      while (node != null) {
         n.next = head;
         head = n;
         node = node.next;
      }
      return head;
   }  