Exercises

1. Write pseudocode for bubble sort.

   A: 

       FUNCTION bubbleSort(collection)
         REPEAT
           SET swappedPosition to false

           FOR index = FIRST INDEX of collection to LAST INDEX of collection - 1
             IF collection[index] > collection[index + 1] THEN
               SET temp to collection[index]
               SET collection[index] to collection[index + 1]
               SET collection[index + 1] to temp
               SET swappedPosition to true
             END IF
           END FOR
         UNTIL swappedPosition is FALSE

         RETURN collection
       END FUNCTION

2. Write pseudocode for quicksort.

   A: 

      FUNCTION quickSort(collection)
        IF collection length <= 1
          RETURN collection;

        SET pivot = collection[0]

        SET left = []
        SET right = []

        FOR index = SECOND INDEX of collection to LAST INDEX of collection -1
          If collection[index] < pivot THEN
            ADD collection[index] to left
          ELSE
            ADD collection[index] to right
        END FOR
        RETURN quickSort(left) CONCATENATED with pivot AND quicksort(right)
      END FUNCTION
        

3. We talked about time complexity in a previous
   checkpoint, and how to get an idea of the 
   efficiency of an algorithm. After looking at 
   the pseudocode for the above sorting methods, 
   identify why merge sort and quick sort are 
   much more efficient than the others. Walking
   through each algorithm with a few sample 
   collections may help.

   A: Merge sort and quick sort are much more efficient
      than others based on their time complexity 
      measure. Their measure is O(n log(n)) whereas
      bubble sort, insertion sort, and Selection sort
      all have a time complexity of O(n^2). 

4. All of the sorts addressed in this checkpoint 
   are known as comparison sorts. Research bucket 
   sort and explain how it works. What is the ideal
   input for bucket sort?

   A: Bucket Sort, is a sorting algorithm in which the
      items from an array are sorted using the following
      steps:

      1. Place the items into buckets or bins.
      2. Sort each individual bucket.
      3. Combine or merge the buckets together to 
         produce a sorted array as its result.
